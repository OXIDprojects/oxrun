#!/usr/bin/env php
<?php

namespace Oxrun;

use Composer\Json\JsonFile;
use Composer\Repository\InstalledFilesystemRepository;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;

// composer bin autoload
if (is_file(__DIR__ . '/../../../autoload.php')) {
    $VENDOR_PATH = __DIR__ . '/../../../';
}

// default autoload
if (is_file(__DIR__ . '/../vendor/autoload.php')) {
    $VENDOR_PATH = __DIR__ . '/../vendor/';
}

$autoloader = require_once $VENDOR_PATH . 'autoload.php';
$file = $VENDOR_PATH . '/composer/installed.json';

$application = new \Oxrun\Application($autoloader, 'oxrun', '@package_version@');

$commandSourceDir          = __DIR__ . '/../src/';
$recursiveIteratorIterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($commandSourceDir));
$regexIterator             = new \RegexIterator($recursiveIteratorIterator, '/.*Command\.php$/');

foreach ($regexIterator as $commandPath) {
    $commandClass = str_replace(array($commandSourceDir, '/', '.php'), array('', '\\', ''), $commandPath);
    $application->add(new $commandClass);
}

$localRepository = new InstalledFilesystemRepository(new JsonFile($file));
$packages = $localRepository->getPackages();

$symfonyContainer = new ContainerBuilder();
$loader = new YamlFileLoader($symfonyContainer, new FileLocator());
foreach ($packages as $package) {
    $serviceFile =  $VENDOR_PATH  . $package->getName() . '/services.yaml';
    if (file_exists($serviceFile)) {
        $loader->load($serviceFile);
    }
}

foreach ($symfonyContainer->findTaggedServiceIds('console.command') as $id => $tags) {
    $definition = $symfonyContainer->getDefinition($id);
    $class = $definition->getClass();
    $application->add(new $class);
}


$application->run();

__HALT_COMPILER();
